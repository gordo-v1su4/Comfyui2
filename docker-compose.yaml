version: '3.8'

services:
  comfyui:
    image: yanwk/comfyui-boot:cu128-slim
    container_name: comfyui2
    ports:
      - "8188:8188"
    environment:
      - CLI_ARGS=--listen 0.0.0.0 --port 8188 --enable-cors-header "*"
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      # GPU settings - required for GPU passthrough
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      
      # S3/MinIO configuration (user uses MinIO)
      - COMFYUI_S3_ENABLED=${COMFYUI_S3_ENABLED}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${SERVICE_USER_MINIO}
      - MINIO_SECRET_KEY=${SERVICE_PASSWORD_MINIO}
      - MINIO_BUCKET_MODELS=${MINIO_BUCKET_MODELS}
      - HF_TOKEN=${HF_TOKEN}
    volumes:
      - ./storage:/root
      - ./Scripts:/root/Scripts:ro
    # Run init tasks in background (if present), ensure user assets exist, then start ComfyUI.
    command: ["bash","-lc","\
      if [ -d /root/Scripts ]; then \
        ( sed 's/\\r$//' /root/Scripts/install_custom_nodes.sh | bash && \
          sed 's/\\r$//' /root/Scripts/install_node_requirements.sh | bash && \
          python3 /root/Scripts/simple_model_downloader.py || true ) & \
      else \
        echo 'Scripts directory not found, skipping init.'; \
      fi; \
      mkdir -p /root/ComfyUI/user && \
      ( [ -f /root/ComfyUI/user/user.css ] || echo '/* user overrides */' > /root/ComfyUI/user/user.css ) && \
      ( [ -f /root/ComfyUI/user/comfy.templates.json ] || echo '{\"templates\":[]}' > /root/ComfyUI/user/comfy.templates.json ); \
      if [ -x /runner-script ]; then \
        exec bash /runner-script; \
      elif [ -f /root/ComfyUI/main.py ]; then \
        echo 'runner-script missing, starting ComfyUI directly via python'; \
        exec python3 -u /root/ComfyUI/main.py --listen 0.0.0.0 --port 8188 --enable-cors-header "*"; \
      else \
        echo 'ComfyUI entrypoint not found, sleeping for diagnostics'; \
        sleep infinity; \
      fi
      "]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8188/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # GPU runtime - required for NVIDIA GPU support
    runtime: nvidia
